/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE   0
#define NUM    1
#define SYMBOL 2
#define FKEY   3
#define GAMING 4
// #define SYS    5
// #define MOUSE  6

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 175

// IDEAS-
// -add layer for wireless functionality (or make combos for them)
// -implement turbo click macro
// -add "magic" button that has a hotkey for each program
// -make thumb mods repeat when tapped then held (tap = 1 space, hold = layer, tap -> hold = repeating spaces)
// -consider making num layer a numpad instead of on home row
// -consider adding more combos (maybe to its own combos.dtsi file)
// -tweak mod-tap and layer-tap configs to my liking
// -add a miryoku keymap to the repo

// Links-
// https://www.reddit.com/r/ErgoMechKeyboards/comments/zfomr0/whats_your_favorite_feature_you_implemented_on/
// https://github.com/urob/zmk-config/blob/main/config/base.keymap
// https://www.reddit.com/r/ErgoMechKeyboards/comments/qzfiae/my_impressions_on_miryoku_36_key_layout_system/

// layer-tap config
&lt {  
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

// mod-tap config
&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <QUICK_TAP_MS>;
    hold-trigger-key-positions = <0>;
};

/ {
    behaviors {
        // Tap or hold left shift for shift, tap for caps lock
        td0: tap_dance_shift_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&kp CAPSLOCK>;
        };
    };

     macros {
        // Combo __, __ & __ to rapid-fire the left mouse button. Repeat combo to turn off.
        turbo_click: turbo_click {
            label = "ZM_turbo_click";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>, <&macro_tap &kp Z &kp M &kp K>, <&macro_release &kp LSHFT>;
        };
    };
    
    combos {
        compatible = "zmk,combos";

        // J + K = ESC
        combo_jk_esc {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <19 20>;
            bindings = <&kp ESC>;
        };

        // In base layer, press east bottom 3 keys to switch to gaming
        combo_switch_to_gaming {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <39 40 41>;
            bindings = <&to 4>;
        };

        // In gaming layer, press east bottom 3 keys to switch to base
        combo_switch_to_base {
            timeout-ms = <50>;
            layers = <4>;
            key-positions = <39 40 41>;
            bindings = <&to 0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
// -----------------------------------------------------------------------------------------
//      | CAPS |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U   |  I  |  O  |  P  | DEL  |
//      | ESC  |  A  |  S  |  D  |  F  |  G  |     |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT/CAPS |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M   |  ,  |  .  |  /  | ENTR |
//                      | CTRL | CMD | SPACE |     | BSPC | SHFT | ALT |
        bindings = <
   &kp CAPS &kp Q &kp W &kp E &kp R &kp T &kp Y     &kp U &kp I     &kp O   &kp P    &kp DEL
   &kp ESC  &kp A &kp S &kp D &kp F &kp G &kp H     &kp J &kp K     &kp L   &kp SEMI &kp SQT
   &td0     &kp Z &kp X &kp C &kp V &kp B &kp N     &kp M &kp COMMA &kp DOT &kp FSLH &kp RET
               &kp LCTRL &kp LCMD &lt NUM SPACE     &lt SYMBOL BSPC &lt FKEY TAB &kp RALT
            >;
        };

        num_layer {
// -----------------------------------------------------------------------------------------
// |   |   |   |   |   |   |    |   |   |   |   |   |   |
// |   | 1 | 2 | 3 | 4 | 5 |    | 6 | 7 | 8 | 9 | 0 |   |
// |   |   |   |   |   |   |    | + | - | * | / | = | . |
//           |   | MOD |   |    | BSPC |   |   |
            bindings = <
   XXX XXX    XXX    XXX    XXX    XXX        XXX         XXX          XXX             XXX           XXX          XXX
   XXX &kp N1 &kp N2 &kp N3 &kp N4 &kp N5     &kp N6      &kp N7       &kp N8          &kp N9        &kp N0       XXX
   XXX XXX    XXX    XXX    XXX    XXX        &kp KP_PLUS &kp KP_MINUS &kp KP_MULTIPLY &kp KP_DIVIDE &kp KP_EQUAL &kp KP_DOT
                              XXX XXX XXX     &kp BSPC XXX &kp K_PASTE
            >;
        };

        symbol_layer {
// -----------------------------------------------------------------------------------------
// |   |   |   |   |   |   |     |  ^  | & | * | ( | ) |   |
// |   | ! | @ | # | $ | % |     |  -  | = | [ | ] | \ | ` |
// |   |   |   |   |   |   |     |  _  | + | { | } | "|" | ~ |
//    | CUT | COPY | PASTE |     | MOD |   |   |
            bindings = <
   XXX XXX      XXX    XXX      XXX      XXX           &kp CARET &kp AMPS  &kp KP_ASTERISK &kp LPAR &kp RPAR &kp BSPC
   XXX &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT     &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   XXX XXX      XXX    XXX      XXX      XXX           &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                  &kp K_CUT &kp K_COPY &kp K_PASTE     XXX XXX XXX
            >;
        };

        fkey_layer {
// -----------------------------------------------------------------------------------------
// |   | F1 | F2  | F3  | F4  |   |     |      | Pg Up  |   |   | Home | Del |
// |   | F5 | F6  | F7  | F8  |   |     |      |   ←    | ↓ | ↑ |  →   |   |
// |   | F9 | F10 | F11 | F12 |   |     | PREV | Pg Dwn |   |   | End  |   |
//             | VOL- | PP | VOL+ |     | NEXT |  MOD   |   |
            bindings = <
   XXX &kp F1 &kp F2  &kp F3  &kp F4  XXX     XXX        &kp PG_UP XXX      XXX    &kp HOME  &kp DEL
   XXX &kp F5 &kp F6  &kp F7  &kp F8  XXX     XXX        &kp LEFT  &kp DOWN &kp UP &kp RIGHT XXX
   XXX &kp F9 &kp F10 &kp F11 &kp F12 XXX     &kp K_PREV &kp PG_DN XXX      XXX    &kp END   XXX
       &kp K_VOL_DN &kp K_PP &kp K_VOL_UP     &kp K_NEXT XXX XXX
            >;
        };

        gaming_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | ESC  |  A  |  S  |  D  |  F  |  G  |     |  H  |  J   |  K  |  L  |  ;  |  '   |
// | CAPS |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M   |  ,  |  .  |  /  | ENTR |
//                 | CTRL | CMD | SPACE |    | BSPC | SHFT | ALT |
            bindings = <
   &kp TAB  &kp Q &kp W &kp E &kp R &kp T &kp Y     &kp U &kp I     &kp O   &kp P    &kp BSPC
   &kp ESC  &kp A &kp S &kp D &kp F &kp G &kp H     &kp J &kp K     &kp L   &kp SEMI &kp SQT
   &kp CAPS &kp Z &kp X &kp C &kp V &kp B &kp N     &kp M &kp COMMA &kp DOT &kp FSLH &kp RET
                   &kp LCTRL &kp LCMD &kp SPACE     &kp BSPC &kp LSHFT &kp RALT
            >;
        };
    };
};
